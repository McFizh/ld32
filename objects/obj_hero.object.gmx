<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.4
friction = 0.3

can_shoot = true

global.startTime = getUnixtime()
global.numOfSheeps = 0

score = 0
health = 100
global.coffeine = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Don't allow control, if game is not running
if !global.gameRunning
{
    if !keyboard_check(vk_space)
        exit
 
    if ( getUnixtime() - global.startTime ) &lt; 2
        exit
           
    room_restart()
    exit
}
    
// Check keyboard
if keyboard_check(vk_left) &amp;&amp; !place_meeting(x-3, y, obj_wall)
{
    hspeed = -3
    image_xscale=-1
    image_speed = 0.4
}

if keyboard_check(vk_right) &amp;&amp; !place_meeting(x+3, y, obj_wall)
{
    hspeed = 3
    image_xscale=1
    image_speed = 0.4
}

if keyboard_check(vk_up) &amp;&amp; !place_meeting(x, y-3, obj_wall)
{
    vspeed = -3
    image_speed = 0.4
}

if keyboard_check(vk_down) &amp;&amp; !place_meeting(x, y+3, obj_wall)
{
    vspeed = 3
    image_speed = 0.4
}

if keyboard_check(vk_space) &amp;&amp; can_shoot == true &amp;&amp; global.coffeine &gt; 0
{
    var obj = instance_create(x,y,obj_coffeeCup)
    
    with (obj)
    {
        speed = 5
        direction = point_direction(x,y, x + other.hspeed , y+other.vspeed)
    }
    
    can_shoot = false
    alarm[0] = 10
    
    global.coffeine -= 5
    if global.coffeine &lt;= 0
        global.coffeine = 0
}
    
// Stop animation
if hspeed == 0 &amp;&amp; vspeed == 0
    image_speed = 0    

//
if health &lt;= 0
{
    endGame()
    exit
}    
    
// Check for collisions
var l1, prevfree
if hspeed &gt; 0
{
    prevfree = 0
    for(l1 = 1; l1&lt;3; l1++)
    if place_meeting(x+l1, y, obj_wall)
    {
        hspeed = 0
        x-=prevfree
        break
    } else prevfree = l1
}

if hspeed &lt; 0
{
    prevfree = 0
    for(l1 = 1; l1&lt;3; l1++)
    if place_meeting(x-l1, y, obj_wall)
    {
        hspeed = 0
        x+=prevfree
        break
    } else prevfree = l1
}

if vspeed &gt; 0
{
    prevfree = 0
    for(l1 = 1; l1&lt;5; l1++)
    if place_meeting(x, y+l1, obj_wall)
    {
        vspeed = 0
        y-=prevfree
        break
    } else prevfree = l1
}
      

if vspeed &lt; 0
{
    prevfree = 0
    for(l1 = 1; l1&lt;5; l1++)
    if place_meeting(x, y-l1, obj_wall)
    {
        vspeed = 0
        y+=prevfree
        break
    } else prevfree = l1
}

    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
